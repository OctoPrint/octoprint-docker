name: Image Deploy

on:
  repository_dispatch:
    types:
      - release
  push:
    branches:
      - master
      
jobs:
  # This job ensures image is only deployed when files that make up the image are changed
  # (changing docs or build scripts won't result in a push to registry)
  filters:
    runs-on: ubuntu-latest
    outputs:
      main: ${{ steps.filter.outputs.main }}
      minimal: ${{ steps.filter.outputs.minimal }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2.5.0
      id: filter
      with:
        filters: '.github/filters.yml'

  release_main:
    runs-on: ubuntu-latest
    needs: filters
    if: needs.filters.outputs.main == 'true' || github.event_name == 'repository_dispatch'


    steps:
      - uses: actions/checkout@v2
      - name: Get Tag if push
        id: latest-octoprint
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: OctoPrint
          repo: OctoPrint
      - name: Set Tag on Push
        if: ${{ github.event_name == 'push'}}
        run: echo "::set-env name=tag_name::${{ steps.latest-octoprint.outputs.release }}"
      - name: Set Tag on dispatch
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: echo "::set-env name=tag_name::${{ github.event.client_payload.tag_name }}"
      - name: Parse semver string
        id: semver_parser
        uses: booxmedialtd/ws-action-parse-semver@v1
        with:
          input_string: "${{ env.tag_name }}"

      - name: Set up Docker Buildx
        id: setup
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      
      - name: Docker Login
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{ secrets.DOCKER_USERNAME}} --password-stdin

      - name: Build and Deploy
        id: build_deploy
        #if matrix tag is latest AND tag_name is NOT equal to latest-octoprint don't build
        # this allows rebuilds of older versions without changing 'latest' to an old release
        if: ${{!(env.tag_name == 'latest' && ( steps.latest-octprint.outputs.release != env.tag_name ))}}
        run: |
          docker buildx build --push \
            --platform linux/arm64,linux/amd64,linux/arm/v7 \
            --cache-from octoprint/octoprint:cache \
            --cache-to octoprint/octoprint:cache \
            --build-arg tag=${{ env.tag_name }} \
            --progress plain \
            --tag octoprint/octoprint:latest \
            --tag octoprint/octoprint:${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }}.${{ steps.semver_parser.outputs.patch }} \
            --tag octoprint/octoprint:${{ steps.semver_parser.outputs.major }}.${{ steps.semver_parser.outputs.minor }} \
            --tag octoprint/octoprint:${{ steps.semver_parser.outputs.major }} \
            -f Dockerfile .
